# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import main_server_pb2 as main__server__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in main_server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GreeterStub(object):
    """same as class in server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_rframe = channel.unary_unary(
                '/Greeter/get_rframe',
                request_serializer=main__server__pb2.HelloRequest.SerializeToString,
                response_deserializer=main__server__pb2.HelloReply.FromString,
                _registered_method=True)
        self.get_infrared_frame = channel.unary_unary(
                '/Greeter/get_infrared_frame',
                request_serializer=main__server__pb2.HelloRequest.SerializeToString,
                response_deserializer=main__server__pb2.HelloReply.FromString,
                _registered_method=True)
        self.ask_xyz = channel.unary_unary(
                '/Greeter/ask_xyz',
                request_serializer=main__server__pb2.xy.SerializeToString,
                response_deserializer=main__server__pb2.xyz.FromString,
                _registered_method=True)
        self.ask_xyzmap = channel.unary_unary(
                '/Greeter/ask_xyzmap',
                request_serializer=main__server__pb2.xyznew.SerializeToString,
                response_deserializer=main__server__pb2.xyzmap.FromString,
                _registered_method=True)
        self.get_intrin = channel.unary_unary(
                '/Greeter/get_intrin',
                request_serializer=main__server__pb2.HelloRequest.SerializeToString,
                response_deserializer=main__server__pb2.intrin_list.FromString,
                _registered_method=True)
        self.get_depth = channel.unary_unary(
                '/Greeter/get_depth',
                request_serializer=main__server__pb2.HelloRequest.SerializeToString,
                response_deserializer=main__server__pb2.img.FromString,
                _registered_method=True)


class GreeterServicer(object):
    """same as class in server
    """

    def get_rframe(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_infrared_frame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ask_xyz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ask_xyzmap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_intrin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_depth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_rframe': grpc.unary_unary_rpc_method_handler(
                    servicer.get_rframe,
                    request_deserializer=main__server__pb2.HelloRequest.FromString,
                    response_serializer=main__server__pb2.HelloReply.SerializeToString,
            ),
            'get_infrared_frame': grpc.unary_unary_rpc_method_handler(
                    servicer.get_infrared_frame,
                    request_deserializer=main__server__pb2.HelloRequest.FromString,
                    response_serializer=main__server__pb2.HelloReply.SerializeToString,
            ),
            'ask_xyz': grpc.unary_unary_rpc_method_handler(
                    servicer.ask_xyz,
                    request_deserializer=main__server__pb2.xy.FromString,
                    response_serializer=main__server__pb2.xyz.SerializeToString,
            ),
            'ask_xyzmap': grpc.unary_unary_rpc_method_handler(
                    servicer.ask_xyzmap,
                    request_deserializer=main__server__pb2.xyznew.FromString,
                    response_serializer=main__server__pb2.xyzmap.SerializeToString,
            ),
            'get_intrin': grpc.unary_unary_rpc_method_handler(
                    servicer.get_intrin,
                    request_deserializer=main__server__pb2.HelloRequest.FromString,
                    response_serializer=main__server__pb2.intrin_list.SerializeToString,
            ),
            'get_depth': grpc.unary_unary_rpc_method_handler(
                    servicer.get_depth,
                    request_deserializer=main__server__pb2.HelloRequest.FromString,
                    response_serializer=main__server__pb2.img.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Greeter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """same as class in server
    """

    @staticmethod
    def get_rframe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/get_rframe',
            main__server__pb2.HelloRequest.SerializeToString,
            main__server__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_infrared_frame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/get_infrared_frame',
            main__server__pb2.HelloRequest.SerializeToString,
            main__server__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ask_xyz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/ask_xyz',
            main__server__pb2.xy.SerializeToString,
            main__server__pb2.xyz.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ask_xyzmap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/ask_xyzmap',
            main__server__pb2.xyznew.SerializeToString,
            main__server__pb2.xyzmap.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_intrin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/get_intrin',
            main__server__pb2.HelloRequest.SerializeToString,
            main__server__pb2.intrin_list.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_depth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Greeter/get_depth',
            main__server__pb2.HelloRequest.SerializeToString,
            main__server__pb2.img.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
